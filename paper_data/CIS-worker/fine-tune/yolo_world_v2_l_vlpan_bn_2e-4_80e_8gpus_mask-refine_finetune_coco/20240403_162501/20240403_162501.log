2024/04/03 16:25:01 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1342013140
    GPU 0,1: NVIDIA GeForce RTX 3090 Ti
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0
    PyTorch: 1.13.0+cu117
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.0+cu117
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1342013140
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/04/03 16:25:02 - mmengine - INFO - Config:
_backend_args = None
_multiscale_resize_transforms = [
    dict(
        transforms=[
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
    dict(
        transforms=[
            dict(scale=(
                320,
                320,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    320,
                    320,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
    dict(
        transforms=[
            dict(scale=(
                960,
                960,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    960,
                    960,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
]
affine_scale = 0.9
albu_train_transforms = [
    dict(p=0.01, type='Blur'),
    dict(p=0.01, type='MedianBlur'),
    dict(p=0.01, type='ToGray'),
    dict(p=0.01, type='CLAHE'),
]
backend_args = None
base_lr = 0.0002
batch_shapes_cfg = None
close_mosaic_epochs = 10
coco_test_dataset = dict(
    _delete_=True,
    class_text_path='data/texts/worker.json',
    dataset=dict(
        ann_file='annotations/CIS-worker-test.json',
        data_prefix=dict(img='test'),
        data_root='/CV/gaobiaoli/dataset/CIS-Dataset',
        filter_cfg=dict(filter_empty_gt=False, min_size=32),
        metainfo=dict(classes=('worker', )),
        type='YOLOv5CocoDataset'),
    pipeline=[
        dict(backend_args=None, type='LoadImageFromFile'),
        dict(scale=(
            640,
            640,
        ), type='YOLOv5KeepRatioResize'),
        dict(
            allow_scale_up=False,
            pad_val=dict(img=114),
            scale=(
                640,
                640,
            ),
            type='LetterResize'),
        dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
        dict(type='LoadText'),
        dict(
            meta_keys=(
                'img_id',
                'img_path',
                'ori_shape',
                'img_shape',
                'scale_factor',
                'pad_param',
                'texts',
            ),
            type='mmdet.PackDetInputs'),
    ],
    type='MultiModalDataset')
coco_train_dataset = dict(
    _delete_=True,
    class_text_path='data/texts/coco_class_texts.json',
    dataset=dict(
        ann_file='annotations/CIS-worker-train01.json',
        data_prefix=dict(img='train'),
        data_root='/CV/gaobiaoli/dataset/CIS-Dataset',
        filter_cfg=dict(filter_empty_gt=False, min_size=32),
        metainfo=dict(classes=('worker', )),
        type='YOLOv5CocoDataset'),
    pipeline=[
        dict(backend_args=None, type='LoadImageFromFile'),
        dict(
            mask2bbox=True,
            type='LoadAnnotations',
            with_bbox=True,
            with_mask=True),
        dict(
            img_scale=(
                640,
                640,
            ),
            pad_val=114.0,
            pre_transform=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(
                    mask2bbox=True,
                    type='LoadAnnotations',
                    with_bbox=True,
                    with_mask=True),
            ],
            type='MultiModalMosaic'),
        dict(prob=0.3, type='YOLOv5CopyPaste'),
        dict(
            border=(
                -320,
                -320,
            ),
            border_val=(
                114,
                114,
                114,
            ),
            max_aspect_ratio=100.0,
            max_rotate_degree=0.0,
            max_shear_degree=0.0,
            min_area_ratio=0.01,
            scaling_ratio_range=(
                0.09999999999999998,
                1.9,
            ),
            type='YOLOv5RandomAffine',
            use_mask_refine=True),
        dict(
            pre_transform=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(
                    mask2bbox=True,
                    type='LoadAnnotations',
                    with_bbox=True,
                    with_mask=True),
                dict(
                    img_scale=(
                        640,
                        640,
                    ),
                    pad_val=114.0,
                    pre_transform=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(
                            mask2bbox=True,
                            type='LoadAnnotations',
                            with_bbox=True,
                            with_mask=True),
                    ],
                    type='MultiModalMosaic'),
                dict(prob=0.3, type='YOLOv5CopyPaste'),
                dict(
                    border=(
                        -320,
                        -320,
                    ),
                    border_val=(
                        114,
                        114,
                        114,
                    ),
                    max_aspect_ratio=100.0,
                    max_rotate_degree=0.0,
                    max_shear_degree=0.0,
                    min_area_ratio=0.01,
                    scaling_ratio_range=(
                        0.09999999999999998,
                        1.9,
                    ),
                    type='YOLOv5RandomAffine',
                    use_mask_refine=True),
            ],
            prob=0.15,
            type='YOLOv5MultiModalMixUp'),
        dict(keys=[
            'gt_masks',
        ], type='RemoveDataElement'),
        dict(
            bbox_params=dict(
                format='pascal_voc',
                label_fields=[
                    'gt_bboxes_labels',
                    'gt_ignore_flags',
                ],
                type='BboxParams'),
            keymap=dict(gt_bboxes='bboxes', img='image'),
            transforms=[
                dict(p=0.01, type='Blur'),
                dict(p=0.01, type='MedianBlur'),
                dict(p=0.01, type='ToGray'),
                dict(p=0.01, type='CLAHE'),
            ],
            type='mmdet.Albu'),
        dict(type='YOLOv5HSVRandomAug'),
        dict(prob=0.5, type='mmdet.RandomFlip'),
        dict(
            max_num_samples=80,
            num_neg_samples=(
                1,
                1,
            ),
            padding_to_max=True,
            padding_value='',
            type='RandomLoadText'),
        dict(
            meta_keys=(
                'img_id',
                'img_path',
                'ori_shape',
                'img_shape',
                'flip',
                'flip_direction',
                'texts',
            ),
            type='mmdet.PackDetInputs'),
    ],
    type='MultiModalDataset')
coco_val_dataset = dict(
    _delete_=True,
    class_text_path='data/texts/worker.json',
    dataset=dict(
        ann_file='annotations/CIS-worker-val.json',
        data_prefix=dict(img='val'),
        data_root='/CV/gaobiaoli/dataset/CIS-Dataset',
        filter_cfg=dict(filter_empty_gt=False, min_size=32),
        metainfo=dict(classes=('worker', )),
        type='YOLOv5CocoDataset'),
    pipeline=[
        dict(backend_args=None, type='LoadImageFromFile'),
        dict(scale=(
            640,
            640,
        ), type='YOLOv5KeepRatioResize'),
        dict(
            allow_scale_up=False,
            pad_val=dict(img=114),
            scale=(
                640,
                640,
            ),
            type='LetterResize'),
        dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
        dict(type='LoadText'),
        dict(
            meta_keys=(
                'img_id',
                'img_path',
                'ori_shape',
                'img_shape',
                'scale_factor',
                'pad_param',
                'texts',
            ),
            type='mmdet.PackDetInputs'),
    ],
    type='MultiModalDataset')
copypaste_prob = 0.3
custom_hooks = [
    dict(
        ema_type='ExpMomentumEMA',
        momentum=0.0001,
        priority=49,
        strict_load=False,
        type='EMAHook',
        update_buffers=True),
    dict(
        switch_epoch=70,
        switch_pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(
                mask2bbox=True,
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True),
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=True,
                pad_val=dict(img=114.0),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
            dict(
                border_val=(
                    114,
                    114,
                    114,
                ),
                max_aspect_ratio=100,
                max_rotate_degree=0.0,
                max_shear_degree=0.0,
                min_area_ratio=0.01,
                scaling_ratio_range=(
                    0.09999999999999998,
                    1.9,
                ),
                type='YOLOv5RandomAffine',
                use_mask_refine=True),
            dict(keys=[
                'gt_masks',
            ], type='RemoveDataElement'),
            dict(
                bbox_params=dict(
                    format='pascal_voc',
                    label_fields=[
                        'gt_bboxes_labels',
                        'gt_ignore_flags',
                    ],
                    type='BboxParams'),
                keymap=dict(gt_bboxes='bboxes', img='image'),
                transforms=[
                    dict(p=0.01, type='Blur'),
                    dict(p=0.01, type='MedianBlur'),
                    dict(p=0.01, type='ToGray'),
                    dict(p=0.01, type='CLAHE'),
                ],
                type='mmdet.Albu'),
            dict(type='YOLOv5HSVRandomAug'),
            dict(prob=0.5, type='mmdet.RandomFlip'),
            dict(
                max_num_samples=80,
                num_neg_samples=(
                    1,
                    1,
                ),
                padding_to_max=True,
                padding_value='',
                type='RandomLoadText'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'flip',
                    'flip_direction',
                    'texts',
                ),
                type='mmdet.PackDetInputs'),
        ],
        type='mmdet.PipelineSwitchHook'),
]
custom_imports = dict(
    allow_failed_imports=False, imports=[
        'yolo_world',
    ])
data_root = 'data/coco/'
dataset_type = 'YOLOv5CocoDataset'
deepen_factor = 1.0
default_hooks = dict(
    checkpoint=dict(
        interval=5, max_keep_ckpts=-1, save_best=None, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(
        lr_factor=0.01,
        max_epochs=80,
        scheduler_type='linear',
        type='YOLOv5ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='mmdet.DetVisualizationHook'))
default_scope = 'mmyolo'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scale = (
    640,
    640,
)
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
last_stage_out_channels = 512
last_transform = [
    dict(keys=[
        'gt_masks',
    ], type='RemoveDataElement'),
    dict(
        bbox_params=dict(
            format='pascal_voc',
            label_fields=[
                'gt_bboxes_labels',
                'gt_ignore_flags',
            ],
            type='BboxParams'),
        keymap=dict(gt_bboxes='bboxes', img='image'),
        transforms=[
            dict(p=0.01, type='Blur'),
            dict(p=0.01, type='MedianBlur'),
            dict(p=0.01, type='ToGray'),
            dict(p=0.01, type='CLAHE'),
        ],
        type='mmdet.Albu'),
    dict(type='YOLOv5HSVRandomAug'),
    dict(prob=0.5, type='mmdet.RandomFlip'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'flip',
            'flip_direction',
        ),
        type='mmdet.PackDetInputs'),
]
launcher = 'none'
load_from = 'work_dirs/yolo_world_v2_l_vlpan_bn_2e-4_80e_8gpus_mask-refine_finetune_coco/epoch_80.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
loss_bbox_weight = 7.5
loss_cls_weight = 0.5
loss_dfl_weight = 0.375
lr_factor = 0.01
max_aspect_ratio = 100
max_epochs = 80
max_keep_ckpts = 2
min_area_ratio = 0.01
mixup_prob = 0.15
model = dict(
    backbone=dict(
        image_model=dict(
            act_cfg=dict(inplace=True, type='SiLU'),
            arch='P5',
            deepen_factor=1.0,
            last_stage_out_channels=512,
            norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
            type='YOLOv8CSPDarknet',
            widen_factor=1.0),
        text_model=dict(
            frozen_modules=[
                'all',
            ],
            model_name='openai/clip-vit-base-patch32',
            type='HuggingCLIPLanguageBackbone'),
        type='MultiModalYOLOBackbone'),
    bbox_head=dict(
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        head_module=dict(
            act_cfg=dict(inplace=True, type='SiLU'),
            embed_dims=512,
            featmap_strides=[
                8,
                16,
                32,
            ],
            in_channels=[
                256,
                512,
                512,
            ],
            norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
            num_classes=80,
            reg_max=16,
            type='YOLOWorldHeadModule',
            use_bn_head=True,
            widen_factor=1.0),
        loss_bbox=dict(
            bbox_format='xyxy',
            iou_mode='ciou',
            loss_weight=7.5,
            reduction='sum',
            return_iou=False,
            type='IoULoss'),
        loss_cls=dict(
            loss_weight=0.5,
            reduction='none',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        loss_dfl=dict(
            loss_weight=0.375,
            reduction='mean',
            type='mmdet.DistributionFocalLoss'),
        prior_generator=dict(
            offset=0.5, strides=[
                8,
                16,
                32,
            ], type='mmdet.MlvlPointGenerator'),
        type='YOLOWorldHead'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0.0,
            0.0,
            0.0,
        ],
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='YOLOWDetDataPreprocessor'),
    mm_neck=True,
    neck=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        block_cfg=dict(type='MaxSigmoidCSPLayerWithTwoConv'),
        deepen_factor=1.0,
        embed_channels=[
            128,
            256,
            256,
        ],
        guide_channels=512,
        in_channels=[
            256,
            512,
            512,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
        num_csp_blocks=3,
        num_heads=[
            4,
            8,
            8,
        ],
        out_channels=[
            256,
            512,
            512,
        ],
        type='YOLOWorldPAFPN',
        widen_factor=1.0),
    num_test_classes=1,
    num_train_classes=80,
    test_cfg=dict(
        max_per_img=300,
        multi_label=True,
        nms=dict(iou_threshold=0.7, type='nms'),
        nms_pre=30000,
        score_thr=0.001),
    train_cfg=dict(
        assigner=dict(
            alpha=0.5,
            beta=6.0,
            eps=1e-09,
            num_classes=80,
            topk=10,
            type='BatchTaskAlignedAssigner',
            use_ciou=True)),
    type='YOLOWorldDetector')
model_test_cfg = dict(
    max_per_img=300,
    multi_label=True,
    nms=dict(iou_threshold=0.7, type='nms'),
    nms_pre=30000,
    score_thr=0.001)
mosaic_affine_transform = [
    dict(
        img_scale=(
            640,
            640,
        ),
        pad_val=114.0,
        pre_transform=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(
                mask2bbox=True,
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True),
        ],
        type='MultiModalMosaic'),
    dict(prob=0.3, type='YOLOv5CopyPaste'),
    dict(
        border=(
            -320,
            -320,
        ),
        border_val=(
            114,
            114,
            114,
        ),
        max_aspect_ratio=100.0,
        max_rotate_degree=0.0,
        max_shear_degree=0.0,
        min_area_ratio=0.01,
        scaling_ratio_range=(
            0.09999999999999998,
            1.9,
        ),
        type='YOLOv5RandomAffine',
        use_mask_refine=True),
]
neck_embed_channels = [
    128,
    256,
    256,
]
neck_num_heads = [
    4,
    8,
    8,
]
norm_cfg = dict(eps=0.001, momentum=0.03, type='BN')
num_classes = 1
num_det_layers = 3
num_training_classes = 80
optim_wrapper = dict(
    clip_grad=dict(max_norm=10.0),
    constructor='YOLOWv5OptimizerConstructor',
    optimizer=dict(
        batch_size_per_gpu=16, lr=0.0002, type='AdamW', weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'backbone.text_model': dict(lr_mult=0.01),
            'logit_scale': dict(weight_decay=0.0)
        })),
    type='OptimWrapper')
param_scheduler = None
persistent_workers = False
pre_transform = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        mask2bbox=True, type='LoadAnnotations', with_bbox=True,
        with_mask=True),
]
resume = False
save_epoch_intervals = 5
strides = [
    8,
    16,
    32,
]
tal_alpha = 0.5
tal_beta = 6.0
tal_topk = 10
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        class_text_path='data/texts/worker.json',
        dataset=dict(
            ann_file='annotations/CIS-worker-test.json',
            data_prefix=dict(img='test'),
            data_root='/CV/gaobiaoli/dataset/CIS-Dataset',
            filter_cfg=dict(filter_empty_gt=False, min_size=32),
            metainfo=dict(classes=('worker', )),
            type='YOLOv5CocoDataset'),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
            dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
            dict(type='LoadText'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                    'pad_param',
                    'texts',
                ),
                type='mmdet.PackDetInputs'),
        ],
        type='MultiModalDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file=
    '/CV/gaobiaoli/dataset/CIS-Dataset/annotations/CIS-worker-test.json',
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='mmdet.CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(scale=(
        640,
        640,
    ), type='YOLOv5KeepRatioResize'),
    dict(
        allow_scale_up=False,
        pad_val=dict(img=114),
        scale=(
            640,
            640,
        ),
        type='LetterResize'),
    dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
    dict(type='LoadText'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
            'pad_param',
            'texts',
        ),
        type='mmdet.PackDetInputs'),
]
text_channels = 512
text_model_name = 'openai/clip-vit-base-patch32'
text_transform = [
    dict(
        max_num_samples=80,
        num_neg_samples=(
            1,
            1,
        ),
        padding_to_max=True,
        padding_value='',
        type='RandomLoadText'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'flip',
            'flip_direction',
            'texts',
        ),
        type='mmdet.PackDetInputs'),
]
train_ann_file = 'annotations/instances_train2017.json'
train_batch_size_per_gpu = 16
train_cfg = dict(
    dynamic_intervals=[
        (
            70,
            1,
        ),
    ],
    max_epochs=80,
    type='EpochBasedTrainLoop',
    val_interval=5)
train_data_prefix = 'train2017/'
train_dataloader = dict(
    batch_size=16,
    collate_fn=dict(type='yolow_collate'),
    dataset=dict(
        class_text_path='data/texts/coco_class_texts.json',
        dataset=dict(
            ann_file='annotations/CIS-worker-train01.json',
            data_prefix=dict(img='train'),
            data_root='/CV/gaobiaoli/dataset/CIS-Dataset',
            filter_cfg=dict(filter_empty_gt=False, min_size=32),
            metainfo=dict(classes=('worker', )),
            type='YOLOv5CocoDataset'),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(
                mask2bbox=True,
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                pad_val=114.0,
                pre_transform=[
                    dict(backend_args=None, type='LoadImageFromFile'),
                    dict(
                        mask2bbox=True,
                        type='LoadAnnotations',
                        with_bbox=True,
                        with_mask=True),
                ],
                type='MultiModalMosaic'),
            dict(prob=0.3, type='YOLOv5CopyPaste'),
            dict(
                border=(
                    -320,
                    -320,
                ),
                border_val=(
                    114,
                    114,
                    114,
                ),
                max_aspect_ratio=100.0,
                max_rotate_degree=0.0,
                max_shear_degree=0.0,
                min_area_ratio=0.01,
                scaling_ratio_range=(
                    0.09999999999999998,
                    1.9,
                ),
                type='YOLOv5RandomAffine',
                use_mask_refine=True),
            dict(
                pre_transform=[
                    dict(backend_args=None, type='LoadImageFromFile'),
                    dict(
                        mask2bbox=True,
                        type='LoadAnnotations',
                        with_bbox=True,
                        with_mask=True),
                    dict(
                        img_scale=(
                            640,
                            640,
                        ),
                        pad_val=114.0,
                        pre_transform=[
                            dict(backend_args=None, type='LoadImageFromFile'),
                            dict(
                                mask2bbox=True,
                                type='LoadAnnotations',
                                with_bbox=True,
                                with_mask=True),
                        ],
                        type='MultiModalMosaic'),
                    dict(prob=0.3, type='YOLOv5CopyPaste'),
                    dict(
                        border=(
                            -320,
                            -320,
                        ),
                        border_val=(
                            114,
                            114,
                            114,
                        ),
                        max_aspect_ratio=100.0,
                        max_rotate_degree=0.0,
                        max_shear_degree=0.0,
                        min_area_ratio=0.01,
                        scaling_ratio_range=(
                            0.09999999999999998,
                            1.9,
                        ),
                        type='YOLOv5RandomAffine',
                        use_mask_refine=True),
                ],
                prob=0.15,
                type='YOLOv5MultiModalMixUp'),
            dict(keys=[
                'gt_masks',
            ], type='RemoveDataElement'),
            dict(
                bbox_params=dict(
                    format='pascal_voc',
                    label_fields=[
                        'gt_bboxes_labels',
                        'gt_ignore_flags',
                    ],
                    type='BboxParams'),
                keymap=dict(gt_bboxes='bboxes', img='image'),
                transforms=[
                    dict(p=0.01, type='Blur'),
                    dict(p=0.01, type='MedianBlur'),
                    dict(p=0.01, type='ToGray'),
                    dict(p=0.01, type='CLAHE'),
                ],
                type='mmdet.Albu'),
            dict(type='YOLOv5HSVRandomAug'),
            dict(prob=0.5, type='mmdet.RandomFlip'),
            dict(
                max_num_samples=80,
                num_neg_samples=(
                    1,
                    1,
                ),
                padding_to_max=True,
                padding_value='',
                type='RandomLoadText'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'flip',
                    'flip_direction',
                    'texts',
                ),
                type='mmdet.PackDetInputs'),
        ],
        type='MultiModalDataset'),
    num_workers=8,
    persistent_workers=False,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_num_workers = 8
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        mask2bbox=True, type='LoadAnnotations', with_bbox=True,
        with_mask=True),
    dict(
        img_scale=(
            640,
            640,
        ),
        pad_val=114.0,
        pre_transform=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(
                mask2bbox=True,
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True),
        ],
        type='MultiModalMosaic'),
    dict(prob=0.3, type='YOLOv5CopyPaste'),
    dict(
        border=(
            -320,
            -320,
        ),
        border_val=(
            114,
            114,
            114,
        ),
        max_aspect_ratio=100.0,
        max_rotate_degree=0.0,
        max_shear_degree=0.0,
        min_area_ratio=0.01,
        scaling_ratio_range=(
            0.09999999999999998,
            1.9,
        ),
        type='YOLOv5RandomAffine',
        use_mask_refine=True),
    dict(
        pre_transform=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(
                mask2bbox=True,
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                pad_val=114.0,
                pre_transform=[
                    dict(backend_args=None, type='LoadImageFromFile'),
                    dict(
                        mask2bbox=True,
                        type='LoadAnnotations',
                        with_bbox=True,
                        with_mask=True),
                ],
                type='MultiModalMosaic'),
            dict(prob=0.3, type='YOLOv5CopyPaste'),
            dict(
                border=(
                    -320,
                    -320,
                ),
                border_val=(
                    114,
                    114,
                    114,
                ),
                max_aspect_ratio=100.0,
                max_rotate_degree=0.0,
                max_shear_degree=0.0,
                min_area_ratio=0.01,
                scaling_ratio_range=(
                    0.09999999999999998,
                    1.9,
                ),
                type='YOLOv5RandomAffine',
                use_mask_refine=True),
        ],
        prob=0.15,
        type='YOLOv5MultiModalMixUp'),
    dict(keys=[
        'gt_masks',
    ], type='RemoveDataElement'),
    dict(
        bbox_params=dict(
            format='pascal_voc',
            label_fields=[
                'gt_bboxes_labels',
                'gt_ignore_flags',
            ],
            type='BboxParams'),
        keymap=dict(gt_bboxes='bboxes', img='image'),
        transforms=[
            dict(p=0.01, type='Blur'),
            dict(p=0.01, type='MedianBlur'),
            dict(p=0.01, type='ToGray'),
            dict(p=0.01, type='CLAHE'),
        ],
        type='mmdet.Albu'),
    dict(type='YOLOv5HSVRandomAug'),
    dict(prob=0.5, type='mmdet.RandomFlip'),
    dict(
        max_num_samples=80,
        num_neg_samples=(
            1,
            1,
        ),
        padding_to_max=True,
        padding_value='',
        type='RandomLoadText'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'flip',
            'flip_direction',
            'texts',
        ),
        type='mmdet.PackDetInputs'),
]
train_pipeline_stage2 = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        mask2bbox=True, type='LoadAnnotations', with_bbox=True,
        with_mask=True),
    dict(scale=(
        640,
        640,
    ), type='YOLOv5KeepRatioResize'),
    dict(
        allow_scale_up=True,
        pad_val=dict(img=114.0),
        scale=(
            640,
            640,
        ),
        type='LetterResize'),
    dict(
        border_val=(
            114,
            114,
            114,
        ),
        max_aspect_ratio=100,
        max_rotate_degree=0.0,
        max_shear_degree=0.0,
        min_area_ratio=0.01,
        scaling_ratio_range=(
            0.09999999999999998,
            1.9,
        ),
        type='YOLOv5RandomAffine',
        use_mask_refine=True),
    dict(keys=[
        'gt_masks',
    ], type='RemoveDataElement'),
    dict(
        bbox_params=dict(
            format='pascal_voc',
            label_fields=[
                'gt_bboxes_labels',
                'gt_ignore_flags',
            ],
            type='BboxParams'),
        keymap=dict(gt_bboxes='bboxes', img='image'),
        transforms=[
            dict(p=0.01, type='Blur'),
            dict(p=0.01, type='MedianBlur'),
            dict(p=0.01, type='ToGray'),
            dict(p=0.01, type='CLAHE'),
        ],
        type='mmdet.Albu'),
    dict(type='YOLOv5HSVRandomAug'),
    dict(prob=0.5, type='mmdet.RandomFlip'),
    dict(
        max_num_samples=80,
        num_neg_samples=(
            1,
            1,
        ),
        padding_to_max=True,
        padding_value='',
        type='RandomLoadText'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'flip',
            'flip_direction',
            'texts',
        ),
        type='mmdet.PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=300, nms=dict(iou_threshold=0.65, type='nms')),
    type='mmdet.DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(
                    transforms=[
                        dict(scale=(
                            640,
                            640,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                640,
                                640,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
                dict(
                    transforms=[
                        dict(scale=(
                            320,
                            320,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                320,
                                320,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
                dict(
                    transforms=[
                        dict(scale=(
                            960,
                            960,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                960,
                                960,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
            ],
            [
                dict(prob=1.0, type='mmdet.RandomFlip'),
                dict(prob=0.0, type='mmdet.RandomFlip'),
            ],
            [
                dict(type='mmdet.LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'pad_param',
                        'flip',
                        'flip_direction',
                    ),
                    type='mmdet.PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
use_mask2refine = True
val_ann_file = 'annotations/instances_val2017.json'
val_batch_size_per_gpu = 1
val_cfg = dict(type='ValLoop')
val_data_prefix = 'val2017/'
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        class_text_path='data/texts/worker.json',
        dataset=dict(
            ann_file='annotations/CIS-worker-val.json',
            data_prefix=dict(img='val'),
            data_root='/CV/gaobiaoli/dataset/CIS-Dataset',
            filter_cfg=dict(filter_empty_gt=False, min_size=32),
            metainfo=dict(classes=('worker', )),
            type='YOLOv5CocoDataset'),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
            dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
            dict(type='LoadText'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                    'pad_param',
                    'texts',
                ),
                type='mmdet.PackDetInputs'),
        ],
        type='MultiModalDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file=
    '/CV/gaobiaoli/dataset/CIS-Dataset/annotations/CIS-worker-val.json',
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='mmdet.CocoMetric')
val_interval_stage2 = 1
val_num_workers = 2
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='mmdet.DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
weight_decay = 0.05
widen_factor = 1.0
work_dir = './work_dirs/yolo_world_v2_l_vlpan_bn_2e-4_80e_8gpus_mask-refine_finetune_coco'

2024/04/03 16:25:06 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/04/03 16:25:06 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(9           ) YOLOv5ParamSchedulerHook           
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/04/03 16:25:10 - mmengine - INFO - Load checkpoint from work_dirs/yolo_world_v2_l_vlpan_bn_2e-4_80e_8gpus_mask-refine_finetune_coco/epoch_80.pth
2024/04/03 16:25:14 - mmengine - INFO - Epoch(test) [   50/14973]    eta: 0:15:27  time: 0.0622  data_time: 0.0108  memory: 13606  
2024/04/03 16:25:14 - mmengine - INFO - Epoch(test) [  100/14973]    eta: 0:09:32  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:15 - mmengine - INFO - Epoch(test) [  150/14973]    eta: 0:07:33  time: 0.0148  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:16 - mmengine - INFO - Epoch(test) [  200/14973]    eta: 0:06:34  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:17 - mmengine - INFO - Epoch(test) [  250/14973]    eta: 0:05:58  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:17 - mmengine - INFO - Epoch(test) [  300/14973]    eta: 0:05:33  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:18 - mmengine - INFO - Epoch(test) [  350/14973]    eta: 0:05:16  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:19 - mmengine - INFO - Epoch(test) [  400/14973]    eta: 0:05:02  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:20 - mmengine - INFO - Epoch(test) [  450/14973]    eta: 0:04:52  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:20 - mmengine - INFO - Epoch(test) [  500/14973]    eta: 0:04:44  time: 0.0155  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:21 - mmengine - INFO - Epoch(test) [  550/14973]    eta: 0:04:37  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:22 - mmengine - INFO - Epoch(test) [  600/14973]    eta: 0:04:31  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:23 - mmengine - INFO - Epoch(test) [  650/14973]    eta: 0:04:26  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:23 - mmengine - INFO - Epoch(test) [  700/14973]    eta: 0:04:21  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:24 - mmengine - INFO - Epoch(test) [  750/14973]    eta: 0:04:17  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:25 - mmengine - INFO - Epoch(test) [  800/14973]    eta: 0:04:13  time: 0.0152  data_time: 0.0004  memory: 1051  
2024/04/03 16:25:26 - mmengine - INFO - Epoch(test) [  850/14973]    eta: 0:04:10  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:26 - mmengine - INFO - Epoch(test) [  900/14973]    eta: 0:04:07  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:27 - mmengine - INFO - Epoch(test) [  950/14973]    eta: 0:04:04  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:28 - mmengine - INFO - Epoch(test) [ 1000/14973]    eta: 0:04:01  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:29 - mmengine - INFO - Epoch(test) [ 1050/14973]    eta: 0:03:59  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:29 - mmengine - INFO - Epoch(test) [ 1100/14973]    eta: 0:03:57  time: 0.0148  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:30 - mmengine - INFO - Epoch(test) [ 1150/14973]    eta: 0:03:54  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:31 - mmengine - INFO - Epoch(test) [ 1200/14973]    eta: 0:03:52  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:32 - mmengine - INFO - Epoch(test) [ 1250/14973]    eta: 0:03:51  time: 0.0152  data_time: 0.0004  memory: 1051  
2024/04/03 16:25:32 - mmengine - INFO - Epoch(test) [ 1300/14973]    eta: 0:03:49  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:33 - mmengine - INFO - Epoch(test) [ 1350/14973]    eta: 0:03:47  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:34 - mmengine - INFO - Epoch(test) [ 1400/14973]    eta: 0:03:45  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:35 - mmengine - INFO - Epoch(test) [ 1450/14973]    eta: 0:03:44  time: 0.0148  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:35 - mmengine - INFO - Epoch(test) [ 1500/14973]    eta: 0:03:42  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:36 - mmengine - INFO - Epoch(test) [ 1550/14973]    eta: 0:03:41  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:37 - mmengine - INFO - Epoch(test) [ 1600/14973]    eta: 0:03:39  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:38 - mmengine - INFO - Epoch(test) [ 1650/14973]    eta: 0:03:38  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:38 - mmengine - INFO - Epoch(test) [ 1700/14973]    eta: 0:03:36  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:39 - mmengine - INFO - Epoch(test) [ 1750/14973]    eta: 0:03:35  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:40 - mmengine - INFO - Epoch(test) [ 1800/14973]    eta: 0:03:34  time: 0.0148  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:41 - mmengine - INFO - Epoch(test) [ 1850/14973]    eta: 0:03:32  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:41 - mmengine - INFO - Epoch(test) [ 1900/14973]    eta: 0:03:31  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:42 - mmengine - INFO - Epoch(test) [ 1950/14973]    eta: 0:03:30  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:43 - mmengine - INFO - Epoch(test) [ 2000/14973]    eta: 0:03:29  time: 0.0148  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:44 - mmengine - INFO - Epoch(test) [ 2050/14973]    eta: 0:03:27  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:44 - mmengine - INFO - Epoch(test) [ 2100/14973]    eta: 0:03:26  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:45 - mmengine - INFO - Epoch(test) [ 2150/14973]    eta: 0:03:27  time: 0.0227  data_time: 0.0067  memory: 1051  
2024/04/03 16:25:46 - mmengine - INFO - Epoch(test) [ 2200/14973]    eta: 0:03:26  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:47 - mmengine - INFO - Epoch(test) [ 2250/14973]    eta: 0:03:25  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:48 - mmengine - INFO - Epoch(test) [ 2300/14973]    eta: 0:03:24  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:48 - mmengine - INFO - Epoch(test) [ 2350/14973]    eta: 0:03:23  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:49 - mmengine - INFO - Epoch(test) [ 2400/14973]    eta: 0:03:22  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:50 - mmengine - INFO - Epoch(test) [ 2450/14973]    eta: 0:03:21  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:51 - mmengine - INFO - Epoch(test) [ 2500/14973]    eta: 0:03:20  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:51 - mmengine - INFO - Epoch(test) [ 2550/14973]    eta: 0:03:19  time: 0.0153  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:52 - mmengine - INFO - Epoch(test) [ 2600/14973]    eta: 0:03:18  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:53 - mmengine - INFO - Epoch(test) [ 2650/14973]    eta: 0:03:17  time: 0.0150  data_time: 0.0003  memory: 1051  
2024/04/03 16:25:54 - mmengine - INFO - Epoch(test) [ 2700/14973]    eta: 0:03:16  time: 0.0152  data_time: 0.0003  memory: 1051  
2024/04/03 16:25:54 - mmengine - INFO - Epoch(test) [ 2750/14973]    eta: 0:03:15  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:55 - mmengine - INFO - Epoch(test) [ 2800/14973]    eta: 0:03:14  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:56 - mmengine - INFO - Epoch(test) [ 2850/14973]    eta: 0:03:13  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:57 - mmengine - INFO - Epoch(test) [ 2900/14973]    eta: 0:03:12  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:57 - mmengine - INFO - Epoch(test) [ 2950/14973]    eta: 0:03:11  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:58 - mmengine - INFO - Epoch(test) [ 3000/14973]    eta: 0:03:10  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:25:59 - mmengine - INFO - Epoch(test) [ 3050/14973]    eta: 0:03:09  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:00 - mmengine - INFO - Epoch(test) [ 3100/14973]    eta: 0:03:08  time: 0.0151  data_time: 0.0003  memory: 1051  
2024/04/03 16:26:00 - mmengine - INFO - Epoch(test) [ 3150/14973]    eta: 0:03:07  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:01 - mmengine - INFO - Epoch(test) [ 3200/14973]    eta: 0:03:06  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:02 - mmengine - INFO - Epoch(test) [ 3250/14973]    eta: 0:03:05  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:03 - mmengine - INFO - Epoch(test) [ 3300/14973]    eta: 0:03:04  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:03 - mmengine - INFO - Epoch(test) [ 3350/14973]    eta: 0:03:03  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:04 - mmengine - INFO - Epoch(test) [ 3400/14973]    eta: 0:03:02  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:05 - mmengine - INFO - Epoch(test) [ 3450/14973]    eta: 0:03:01  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:06 - mmengine - INFO - Epoch(test) [ 3500/14973]    eta: 0:03:00  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:07 - mmengine - INFO - Epoch(test) [ 3550/14973]    eta: 0:02:59  time: 0.0156  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:07 - mmengine - INFO - Epoch(test) [ 3600/14973]    eta: 0:02:59  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:08 - mmengine - INFO - Epoch(test) [ 3650/14973]    eta: 0:02:58  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:09 - mmengine - INFO - Epoch(test) [ 3700/14973]    eta: 0:02:57  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:10 - mmengine - INFO - Epoch(test) [ 3750/14973]    eta: 0:02:56  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:10 - mmengine - INFO - Epoch(test) [ 3800/14973]    eta: 0:02:55  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:11 - mmengine - INFO - Epoch(test) [ 3850/14973]    eta: 0:02:54  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:12 - mmengine - INFO - Epoch(test) [ 3900/14973]    eta: 0:02:53  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:13 - mmengine - INFO - Epoch(test) [ 3950/14973]    eta: 0:02:52  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:13 - mmengine - INFO - Epoch(test) [ 4000/14973]    eta: 0:02:51  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:14 - mmengine - INFO - Epoch(test) [ 4050/14973]    eta: 0:02:51  time: 0.0151  data_time: 0.0005  memory: 1051  
2024/04/03 16:26:15 - mmengine - INFO - Epoch(test) [ 4100/14973]    eta: 0:02:50  time: 0.0156  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:16 - mmengine - INFO - Epoch(test) [ 4150/14973]    eta: 0:02:49  time: 0.0154  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:17 - mmengine - INFO - Epoch(test) [ 4200/14973]    eta: 0:02:49  time: 0.0249  data_time: 0.0096  memory: 1051  
2024/04/03 16:26:18 - mmengine - INFO - Epoch(test) [ 4250/14973]    eta: 0:02:48  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:18 - mmengine - INFO - Epoch(test) [ 4300/14973]    eta: 0:02:48  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:19 - mmengine - INFO - Epoch(test) [ 4350/14973]    eta: 0:02:47  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:20 - mmengine - INFO - Epoch(test) [ 4400/14973]    eta: 0:02:46  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:21 - mmengine - INFO - Epoch(test) [ 4450/14973]    eta: 0:02:45  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:21 - mmengine - INFO - Epoch(test) [ 4500/14973]    eta: 0:02:44  time: 0.0152  data_time: 0.0003  memory: 1051  
2024/04/03 16:26:22 - mmengine - INFO - Epoch(test) [ 4550/14973]    eta: 0:02:43  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:23 - mmengine - INFO - Epoch(test) [ 4600/14973]    eta: 0:02:42  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:24 - mmengine - INFO - Epoch(test) [ 4650/14973]    eta: 0:02:41  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:24 - mmengine - INFO - Epoch(test) [ 4700/14973]    eta: 0:02:41  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:25 - mmengine - INFO - Epoch(test) [ 4750/14973]    eta: 0:02:40  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:26 - mmengine - INFO - Epoch(test) [ 4800/14973]    eta: 0:02:39  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:27 - mmengine - INFO - Epoch(test) [ 4850/14973]    eta: 0:02:38  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:27 - mmengine - INFO - Epoch(test) [ 4900/14973]    eta: 0:02:37  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:28 - mmengine - INFO - Epoch(test) [ 4950/14973]    eta: 0:02:36  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:29 - mmengine - INFO - Epoch(test) [ 5000/14973]    eta: 0:02:35  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:30 - mmengine - INFO - Epoch(test) [ 5050/14973]    eta: 0:02:35  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:30 - mmengine - INFO - Epoch(test) [ 5100/14973]    eta: 0:02:34  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:31 - mmengine - INFO - Epoch(test) [ 5150/14973]    eta: 0:02:33  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:32 - mmengine - INFO - Epoch(test) [ 5200/14973]    eta: 0:02:32  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:33 - mmengine - INFO - Epoch(test) [ 5250/14973]    eta: 0:02:31  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:33 - mmengine - INFO - Epoch(test) [ 5300/14973]    eta: 0:02:30  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:34 - mmengine - INFO - Epoch(test) [ 5350/14973]    eta: 0:02:30  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:35 - mmengine - INFO - Epoch(test) [ 5400/14973]    eta: 0:02:29  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:36 - mmengine - INFO - Epoch(test) [ 5450/14973]    eta: 0:02:28  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:36 - mmengine - INFO - Epoch(test) [ 5500/14973]    eta: 0:02:27  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:37 - mmengine - INFO - Epoch(test) [ 5550/14973]    eta: 0:02:26  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:38 - mmengine - INFO - Epoch(test) [ 5600/14973]    eta: 0:02:25  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:39 - mmengine - INFO - Epoch(test) [ 5650/14973]    eta: 0:02:25  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:39 - mmengine - INFO - Epoch(test) [ 5700/14973]    eta: 0:02:24  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:40 - mmengine - INFO - Epoch(test) [ 5750/14973]    eta: 0:02:23  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:41 - mmengine - INFO - Epoch(test) [ 5800/14973]    eta: 0:02:22  time: 0.0152  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:42 - mmengine - INFO - Epoch(test) [ 5850/14973]    eta: 0:02:21  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:42 - mmengine - INFO - Epoch(test) [ 5900/14973]    eta: 0:02:21  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:43 - mmengine - INFO - Epoch(test) [ 5950/14973]    eta: 0:02:20  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:44 - mmengine - INFO - Epoch(test) [ 6000/14973]    eta: 0:02:19  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:45 - mmengine - INFO - Epoch(test) [ 6050/14973]    eta: 0:02:18  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:45 - mmengine - INFO - Epoch(test) [ 6100/14973]    eta: 0:02:17  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:46 - mmengine - INFO - Epoch(test) [ 6150/14973]    eta: 0:02:16  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:47 - mmengine - INFO - Epoch(test) [ 6200/14973]    eta: 0:02:16  time: 0.0226  data_time: 0.0077  memory: 1051  
2024/04/03 16:26:48 - mmengine - INFO - Epoch(test) [ 6250/14973]    eta: 0:02:16  time: 0.0205  data_time: 0.0056  memory: 1051  
2024/04/03 16:26:49 - mmengine - INFO - Epoch(test) [ 6300/14973]    eta: 0:02:15  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:50 - mmengine - INFO - Epoch(test) [ 6350/14973]    eta: 0:02:14  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:51 - mmengine - INFO - Epoch(test) [ 6400/14973]    eta: 0:02:13  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:51 - mmengine - INFO - Epoch(test) [ 6450/14973]    eta: 0:02:12  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:52 - mmengine - INFO - Epoch(test) [ 6500/14973]    eta: 0:02:12  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:53 - mmengine - INFO - Epoch(test) [ 6550/14973]    eta: 0:02:11  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:54 - mmengine - INFO - Epoch(test) [ 6600/14973]    eta: 0:02:10  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:54 - mmengine - INFO - Epoch(test) [ 6650/14973]    eta: 0:02:09  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:55 - mmengine - INFO - Epoch(test) [ 6700/14973]    eta: 0:02:08  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:56 - mmengine - INFO - Epoch(test) [ 6750/14973]    eta: 0:02:07  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:57 - mmengine - INFO - Epoch(test) [ 6800/14973]    eta: 0:02:07  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:57 - mmengine - INFO - Epoch(test) [ 6850/14973]    eta: 0:02:06  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:58 - mmengine - INFO - Epoch(test) [ 6900/14973]    eta: 0:02:05  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:26:59 - mmengine - INFO - Epoch(test) [ 6950/14973]    eta: 0:02:04  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:00 - mmengine - INFO - Epoch(test) [ 7000/14973]    eta: 0:02:03  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:00 - mmengine - INFO - Epoch(test) [ 7050/14973]    eta: 0:02:03  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:01 - mmengine - INFO - Epoch(test) [ 7100/14973]    eta: 0:02:02  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:02 - mmengine - INFO - Epoch(test) [ 7150/14973]    eta: 0:02:01  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:03 - mmengine - INFO - Epoch(test) [ 7200/14973]    eta: 0:02:00  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:03 - mmengine - INFO - Epoch(test) [ 7250/14973]    eta: 0:01:59  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:04 - mmengine - INFO - Epoch(test) [ 7300/14973]    eta: 0:01:59  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:05 - mmengine - INFO - Epoch(test) [ 7350/14973]    eta: 0:01:58  time: 0.0153  data_time: 0.0006  memory: 1051  
2024/04/03 16:27:06 - mmengine - INFO - Epoch(test) [ 7400/14973]    eta: 0:01:57  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:06 - mmengine - INFO - Epoch(test) [ 7450/14973]    eta: 0:01:56  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:07 - mmengine - INFO - Epoch(test) [ 7500/14973]    eta: 0:01:55  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:08 - mmengine - INFO - Epoch(test) [ 7550/14973]    eta: 0:01:55  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:09 - mmengine - INFO - Epoch(test) [ 7600/14973]    eta: 0:01:54  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:09 - mmengine - INFO - Epoch(test) [ 7650/14973]    eta: 0:01:53  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:10 - mmengine - INFO - Epoch(test) [ 7700/14973]    eta: 0:01:52  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:11 - mmengine - INFO - Epoch(test) [ 7750/14973]    eta: 0:01:51  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:12 - mmengine - INFO - Epoch(test) [ 7800/14973]    eta: 0:01:51  time: 0.0148  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:12 - mmengine - INFO - Epoch(test) [ 7850/14973]    eta: 0:01:50  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:13 - mmengine - INFO - Epoch(test) [ 7900/14973]    eta: 0:01:49  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:14 - mmengine - INFO - Epoch(test) [ 7950/14973]    eta: 0:01:48  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:15 - mmengine - INFO - Epoch(test) [ 8000/14973]    eta: 0:01:47  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:15 - mmengine - INFO - Epoch(test) [ 8050/14973]    eta: 0:01:47  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:16 - mmengine - INFO - Epoch(test) [ 8100/14973]    eta: 0:01:46  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:17 - mmengine - INFO - Epoch(test) [ 8150/14973]    eta: 0:01:45  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:18 - mmengine - INFO - Epoch(test) [ 8200/14973]    eta: 0:01:44  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:18 - mmengine - INFO - Epoch(test) [ 8250/14973]    eta: 0:01:43  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:19 - mmengine - INFO - Epoch(test) [ 8300/14973]    eta: 0:01:43  time: 0.0236  data_time: 0.0086  memory: 1051  
2024/04/03 16:27:20 - mmengine - INFO - Epoch(test) [ 8350/14973]    eta: 0:01:42  time: 0.0153  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:21 - mmengine - INFO - Epoch(test) [ 8400/14973]    eta: 0:01:41  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:22 - mmengine - INFO - Epoch(test) [ 8450/14973]    eta: 0:01:41  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:23 - mmengine - INFO - Epoch(test) [ 8500/14973]    eta: 0:01:40  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:23 - mmengine - INFO - Epoch(test) [ 8550/14973]    eta: 0:01:39  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:24 - mmengine - INFO - Epoch(test) [ 8600/14973]    eta: 0:01:38  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:25 - mmengine - INFO - Epoch(test) [ 8650/14973]    eta: 0:01:37  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:26 - mmengine - INFO - Epoch(test) [ 8700/14973]    eta: 0:01:37  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:26 - mmengine - INFO - Epoch(test) [ 8750/14973]    eta: 0:01:36  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:27 - mmengine - INFO - Epoch(test) [ 8800/14973]    eta: 0:01:35  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:28 - mmengine - INFO - Epoch(test) [ 8850/14973]    eta: 0:01:34  time: 0.0152  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:29 - mmengine - INFO - Epoch(test) [ 8900/14973]    eta: 0:01:33  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:29 - mmengine - INFO - Epoch(test) [ 8950/14973]    eta: 0:01:33  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:30 - mmengine - INFO - Epoch(test) [ 9000/14973]    eta: 0:01:32  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:31 - mmengine - INFO - Epoch(test) [ 9050/14973]    eta: 0:01:31  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:32 - mmengine - INFO - Epoch(test) [ 9100/14973]    eta: 0:01:30  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:32 - mmengine - INFO - Epoch(test) [ 9150/14973]    eta: 0:01:30  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:33 - mmengine - INFO - Epoch(test) [ 9200/14973]    eta: 0:01:29  time: 0.0152  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:34 - mmengine - INFO - Epoch(test) [ 9250/14973]    eta: 0:01:28  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:35 - mmengine - INFO - Epoch(test) [ 9300/14973]    eta: 0:01:27  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:35 - mmengine - INFO - Epoch(test) [ 9350/14973]    eta: 0:01:26  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:36 - mmengine - INFO - Epoch(test) [ 9400/14973]    eta: 0:01:26  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:37 - mmengine - INFO - Epoch(test) [ 9450/14973]    eta: 0:01:25  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:38 - mmengine - INFO - Epoch(test) [ 9500/14973]    eta: 0:01:24  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:38 - mmengine - INFO - Epoch(test) [ 9550/14973]    eta: 0:01:23  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:39 - mmengine - INFO - Epoch(test) [ 9600/14973]    eta: 0:01:22  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:40 - mmengine - INFO - Epoch(test) [ 9650/14973]    eta: 0:01:22  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:41 - mmengine - INFO - Epoch(test) [ 9700/14973]    eta: 0:01:21  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:41 - mmengine - INFO - Epoch(test) [ 9750/14973]    eta: 0:01:20  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:42 - mmengine - INFO - Epoch(test) [ 9800/14973]    eta: 0:01:19  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:43 - mmengine - INFO - Epoch(test) [ 9850/14973]    eta: 0:01:19  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:44 - mmengine - INFO - Epoch(test) [ 9900/14973]    eta: 0:01:18  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:44 - mmengine - INFO - Epoch(test) [ 9950/14973]    eta: 0:01:17  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:45 - mmengine - INFO - Epoch(test) [10000/14973]    eta: 0:01:16  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:46 - mmengine - INFO - Epoch(test) [10050/14973]    eta: 0:01:15  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:47 - mmengine - INFO - Epoch(test) [10100/14973]    eta: 0:01:15  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:47 - mmengine - INFO - Epoch(test) [10150/14973]    eta: 0:01:14  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:48 - mmengine - INFO - Epoch(test) [10200/14973]    eta: 0:01:13  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:49 - mmengine - INFO - Epoch(test) [10250/14973]    eta: 0:01:12  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:50 - mmengine - INFO - Epoch(test) [10300/14973]    eta: 0:01:12  time: 0.0271  data_time: 0.0123  memory: 1051  
2024/04/03 16:27:51 - mmengine - INFO - Epoch(test) [10350/14973]    eta: 0:01:11  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:52 - mmengine - INFO - Epoch(test) [10400/14973]    eta: 0:01:10  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:52 - mmengine - INFO - Epoch(test) [10450/14973]    eta: 0:01:09  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:53 - mmengine - INFO - Epoch(test) [10500/14973]    eta: 0:01:09  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:54 - mmengine - INFO - Epoch(test) [10550/14973]    eta: 0:01:08  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:55 - mmengine - INFO - Epoch(test) [10600/14973]    eta: 0:01:07  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:55 - mmengine - INFO - Epoch(test) [10650/14973]    eta: 0:01:06  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:56 - mmengine - INFO - Epoch(test) [10700/14973]    eta: 0:01:06  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:57 - mmengine - INFO - Epoch(test) [10750/14973]    eta: 0:01:05  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:58 - mmengine - INFO - Epoch(test) [10800/14973]    eta: 0:01:04  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:58 - mmengine - INFO - Epoch(test) [10850/14973]    eta: 0:01:03  time: 0.0152  data_time: 0.0002  memory: 1051  
2024/04/03 16:27:59 - mmengine - INFO - Epoch(test) [10900/14973]    eta: 0:01:02  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:00 - mmengine - INFO - Epoch(test) [10950/14973]    eta: 0:01:02  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:01 - mmengine - INFO - Epoch(test) [11000/14973]    eta: 0:01:01  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:02 - mmengine - INFO - Epoch(test) [11050/14973]    eta: 0:01:00  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:02 - mmengine - INFO - Epoch(test) [11100/14973]    eta: 0:00:59  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:03 - mmengine - INFO - Epoch(test) [11150/14973]    eta: 0:00:58  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:04 - mmengine - INFO - Epoch(test) [11200/14973]    eta: 0:00:58  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:05 - mmengine - INFO - Epoch(test) [11250/14973]    eta: 0:00:57  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:05 - mmengine - INFO - Epoch(test) [11300/14973]    eta: 0:00:56  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:06 - mmengine - INFO - Epoch(test) [11350/14973]    eta: 0:00:55  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:07 - mmengine - INFO - Epoch(test) [11400/14973]    eta: 0:00:55  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:08 - mmengine - INFO - Epoch(test) [11450/14973]    eta: 0:00:54  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:08 - mmengine - INFO - Epoch(test) [11500/14973]    eta: 0:00:53  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:09 - mmengine - INFO - Epoch(test) [11550/14973]    eta: 0:00:52  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:10 - mmengine - INFO - Epoch(test) [11600/14973]    eta: 0:00:51  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:11 - mmengine - INFO - Epoch(test) [11650/14973]    eta: 0:00:51  time: 0.0155  data_time: 0.0006  memory: 1051  
2024/04/03 16:28:11 - mmengine - INFO - Epoch(test) [11700/14973]    eta: 0:00:50  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:12 - mmengine - INFO - Epoch(test) [11750/14973]    eta: 0:00:49  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:13 - mmengine - INFO - Epoch(test) [11800/14973]    eta: 0:00:48  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:14 - mmengine - INFO - Epoch(test) [11850/14973]    eta: 0:00:48  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:14 - mmengine - INFO - Epoch(test) [11900/14973]    eta: 0:00:47  time: 0.0152  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:15 - mmengine - INFO - Epoch(test) [11950/14973]    eta: 0:00:46  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:16 - mmengine - INFO - Epoch(test) [12000/14973]    eta: 0:00:45  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:17 - mmengine - INFO - Epoch(test) [12050/14973]    eta: 0:00:45  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:17 - mmengine - INFO - Epoch(test) [12100/14973]    eta: 0:00:44  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:18 - mmengine - INFO - Epoch(test) [12150/14973]    eta: 0:00:43  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:19 - mmengine - INFO - Epoch(test) [12200/14973]    eta: 0:00:42  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:20 - mmengine - INFO - Epoch(test) [12250/14973]    eta: 0:00:41  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:20 - mmengine - INFO - Epoch(test) [12300/14973]    eta: 0:00:41  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:21 - mmengine - INFO - Epoch(test) [12350/14973]    eta: 0:00:40  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:22 - mmengine - INFO - Epoch(test) [12400/14973]    eta: 0:00:39  time: 0.0260  data_time: 0.0112  memory: 1051  
2024/04/03 16:28:23 - mmengine - INFO - Epoch(test) [12450/14973]    eta: 0:00:38  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:24 - mmengine - INFO - Epoch(test) [12500/14973]    eta: 0:00:38  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:25 - mmengine - INFO - Epoch(test) [12550/14973]    eta: 0:00:37  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:25 - mmengine - INFO - Epoch(test) [12600/14973]    eta: 0:00:36  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:26 - mmengine - INFO - Epoch(test) [12650/14973]    eta: 0:00:35  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:27 - mmengine - INFO - Epoch(test) [12700/14973]    eta: 0:00:35  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:28 - mmengine - INFO - Epoch(test) [12750/14973]    eta: 0:00:34  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:28 - mmengine - INFO - Epoch(test) [12800/14973]    eta: 0:00:33  time: 0.0151  data_time: 0.0003  memory: 1051  
2024/04/03 16:28:29 - mmengine - INFO - Epoch(test) [12850/14973]    eta: 0:00:32  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:30 - mmengine - INFO - Epoch(test) [12900/14973]    eta: 0:00:31  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:31 - mmengine - INFO - Epoch(test) [12950/14973]    eta: 0:00:31  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:31 - mmengine - INFO - Epoch(test) [13000/14973]    eta: 0:00:30  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:32 - mmengine - INFO - Epoch(test) [13050/14973]    eta: 0:00:29  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:33 - mmengine - INFO - Epoch(test) [13100/14973]    eta: 0:00:28  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:34 - mmengine - INFO - Epoch(test) [13150/14973]    eta: 0:00:28  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:34 - mmengine - INFO - Epoch(test) [13200/14973]    eta: 0:00:27  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:35 - mmengine - INFO - Epoch(test) [13250/14973]    eta: 0:00:26  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:36 - mmengine - INFO - Epoch(test) [13300/14973]    eta: 0:00:25  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:37 - mmengine - INFO - Epoch(test) [13350/14973]    eta: 0:00:24  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:37 - mmengine - INFO - Epoch(test) [13400/14973]    eta: 0:00:24  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:38 - mmengine - INFO - Epoch(test) [13450/14973]    eta: 0:00:23  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:39 - mmengine - INFO - Epoch(test) [13500/14973]    eta: 0:00:22  time: 0.0158  data_time: 0.0010  memory: 1051  
2024/04/03 16:28:40 - mmengine - INFO - Epoch(test) [13550/14973]    eta: 0:00:21  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:40 - mmengine - INFO - Epoch(test) [13600/14973]    eta: 0:00:21  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:41 - mmengine - INFO - Epoch(test) [13650/14973]    eta: 0:00:20  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:42 - mmengine - INFO - Epoch(test) [13700/14973]    eta: 0:00:19  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:43 - mmengine - INFO - Epoch(test) [13750/14973]    eta: 0:00:18  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:43 - mmengine - INFO - Epoch(test) [13800/14973]    eta: 0:00:18  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:44 - mmengine - INFO - Epoch(test) [13850/14973]    eta: 0:00:17  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:45 - mmengine - INFO - Epoch(test) [13900/14973]    eta: 0:00:16  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:46 - mmengine - INFO - Epoch(test) [13950/14973]    eta: 0:00:15  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:46 - mmengine - INFO - Epoch(test) [14000/14973]    eta: 0:00:14  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:47 - mmengine - INFO - Epoch(test) [14050/14973]    eta: 0:00:14  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:48 - mmengine - INFO - Epoch(test) [14100/14973]    eta: 0:00:13  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:49 - mmengine - INFO - Epoch(test) [14150/14973]    eta: 0:00:12  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:49 - mmengine - INFO - Epoch(test) [14200/14973]    eta: 0:00:11  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:50 - mmengine - INFO - Epoch(test) [14250/14973]    eta: 0:00:11  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:51 - mmengine - INFO - Epoch(test) [14300/14973]    eta: 0:00:10  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:52 - mmengine - INFO - Epoch(test) [14350/14973]    eta: 0:00:09  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:52 - mmengine - INFO - Epoch(test) [14400/14973]    eta: 0:00:08  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:54 - mmengine - INFO - Epoch(test) [14450/14973]    eta: 0:00:08  time: 0.0239  data_time: 0.0091  memory: 1051  
2024/04/03 16:28:54 - mmengine - INFO - Epoch(test) [14500/14973]    eta: 0:00:07  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:55 - mmengine - INFO - Epoch(test) [14550/14973]    eta: 0:00:06  time: 0.0151  data_time: 0.0003  memory: 1051  
2024/04/03 16:28:56 - mmengine - INFO - Epoch(test) [14600/14973]    eta: 0:00:05  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:57 - mmengine - INFO - Epoch(test) [14650/14973]    eta: 0:00:04  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:57 - mmengine - INFO - Epoch(test) [14700/14973]    eta: 0:00:04  time: 0.0149  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:58 - mmengine - INFO - Epoch(test) [14750/14973]    eta: 0:00:03  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:28:59 - mmengine - INFO - Epoch(test) [14800/14973]    eta: 0:00:02  time: 0.0151  data_time: 0.0002  memory: 1051  
2024/04/03 16:29:00 - mmengine - INFO - Epoch(test) [14850/14973]    eta: 0:00:01  time: 0.0152  data_time: 0.0002  memory: 1051  
2024/04/03 16:29:00 - mmengine - INFO - Epoch(test) [14900/14973]    eta: 0:00:01  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:29:01 - mmengine - INFO - Epoch(test) [14950/14973]    eta: 0:00:00  time: 0.0150  data_time: 0.0002  memory: 1051  
2024/04/03 16:29:02 - mmengine - INFO - Evaluating bbox...
2024/04/03 16:29:06 - mmengine - INFO - bbox_mAP_copypaste: 0.841 0.979 0.927 0.407 0.800 0.885
2024/04/03 16:29:06 - mmengine - INFO - Epoch(test) [14973/14973]    coco/bbox_mAP: 0.8410  coco/bbox_mAP_50: 0.9790  coco/bbox_mAP_75: 0.9270  coco/bbox_mAP_s: 0.4070  coco/bbox_mAP_m: 0.8000  coco/bbox_mAP_l: 0.8850  data_time: 0.0005  time: 0.0154
